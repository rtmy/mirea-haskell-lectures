
==================== FINAL INTERFACE ====================
2017-03-18 10:44:58.2238825 UTC

interface main@main:Main 8002
  interface hash: 785f03a52458b7091336c6a1edbd7002
  ABI hash: 5f84f5e14b9f61ced2f37a7ef4154d4e
  export-list hash: a0d3a968cdb31d89ed8bb62e48b91d99
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a6a7bea0e7df6c8c8e9078e4ba071544
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.exampleTree
  Main.f
  Main.main
  Main.toTree
  Main.toTrees
  Main.Tree{Main.Directory Main.File}
module dependencies:
package dependencies: Win32-2.3.1.1@Win32-2.3.1.1
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 time-1.6.0.1@time-1.6.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.IO 4d461f9283683225c61e68db403481ad
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  base-4.9.1.0:System.IO 5daf3f384209c11d9566e3409af8ec5d
import  -/  directory-1.3.0.0@directory-1.3.0.0:System.Directory 4f448ef742f586f293d03ae3d978f8f8
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
2d1f4dd603d8fe725d5349c46f1f2298
  $fShowTree :: GHC.Show.Show Main.Tree
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Tree
                  Main.$fShowTree_$cshowsPrec
                  Main.$fShowTree_$cshow
                  Main.$fShowTree_$cshowList -}
2d1f4dd603d8fe725d5349c46f1f2298
  $fShowTree1 :: Main.Tree -> GHC.Show.ShowS
  {- Arity: 2 -}
6901185fcacad8560fd62929f24f288a
  $fShowTree2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Directory "#) -}
63a53d33f23bc032a49d65f8df98da71
  $fShowTree3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "File "#) -}
2d1f4dd603d8fe725d5349c46f1f2298
  $fShowTree_$cshow :: Main.Tree -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Tree) ->
                 Main.$fShowTree_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2d1f4dd603d8fe725d5349c46f1f2298
  $fShowTree_$cshowList :: [Main.Tree] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.Tree Main.$fShowTree1) -}
2d1f4dd603d8fe725d5349c46f1f2298
  $fShowTree_$cshowsPrec ::
    GHC.Types.Int -> Main.Tree -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Tree)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec ww1 w1 w2 }) -}
c939973f6a949ccd1e15aec439820991
  $tc'Directory :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17401615259866431471##
                   15410464683000008523##
                   Main.$trModule
                   Main.$tc'Directory1) -}
71374868a79ed7fe7b379c0d35c2ab2e
  $tc'Directory1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Directory"#) -}
f73f3af284fe710efc8147af89d6e2a9
  $tc'File :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4623153891653821719##
                   5318654032868001390##
                   Main.$trModule
                   Main.$tc'File1) -}
bdc52344421338916f59437b3f4494e3
  $tc'File1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'File"#) -}
eb65309e444719620bb28719f183a311
  $tcTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5221301707935523821##
                   5443990263623556092##
                   Main.$trModule
                   Main.$tcTree1) -}
141ad2548acd839d09f2168b36f91bb5
  $tcTree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Tree"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
2d1f4dd603d8fe725d5349c46f1f2298
  $w$cshowsPrec ::
    GHC.Prim.Int# -> Main.Tree -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Main.Tree)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Main.File b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Main.$fShowTree3
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows6
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w1)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowTree3
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows6
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1))))) }
                   Main.Directory b1 b2
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Main.$fShowTree2
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows6
                               (GHC.Show.showLitString
                                  b1
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.shows6
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showSpace1
                                        (GHC.Show.showList__ @ Main.Tree Main.$fShowTree1 b2 x)))))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p w1
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1)) } }) -}
5c44f89332dac4cb0a5e58f72d49bed6
  $wf ::
    GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S,1*U><L,U><S,U>, Inline: [0] -}
2d1f4dd603d8fe725d5349c46f1f2298
  data Tree
    = File GHC.IO.FilePath | Directory GHC.IO.FilePath [Main.Tree]
ee7eda1fe77cfe921950cb5b7bec7e1c
  exampleTree :: Main.Tree
  {- Strictness: m2,
     Unfolding: (Main.Directory Main.exampleTree10 Main.exampleTree1) -}
cb874fee221d06353d20cab10bec0767
  exampleTree1 :: [Main.Tree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Tree
                   Main.exampleTree5
                   Main.exampleTree2) -}
badab0d691f9277c972f0dbed0af36d5
  exampleTree10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "."#) -}
7a830085d8b43287c525a262804a121c
  exampleTree2 :: [Main.Tree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Tree
                   Main.exampleTree3
                   (GHC.Types.[] @ Main.Tree)) -}
91d2cd3266059fa226198189d1f09af7
  exampleTree3 :: Main.Tree
  {- Strictness: m1, Unfolding: (Main.File Main.exampleTree4) -}
67e961d9d26aff24471133bc217977be
  exampleTree4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "hello.cabal"#) -}
8b2058a054b7b72168c81fcdbc910e0f
  exampleTree5 :: Main.Tree
  {- Strictness: m2,
     Unfolding: (Main.Directory Main.exampleTree9 Main.exampleTree6) -}
07a35b4af9d0fc884726856f07bdf034
  exampleTree6 :: [Main.Tree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Tree
                   Main.exampleTree7
                   (GHC.Types.[] @ Main.Tree)) -}
f322fd74ed537902b30941876d2e5fcb
  exampleTree7 :: Main.Tree
  {- Strictness: m1, Unfolding: (Main.File Main.exampleTree8) -}
eef8b536277c375a8dfc9c33d5e943a1
  exampleTree8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Hello.hs"#) -}
4d09554a660e44369274ba6a1c9bccaf
  exampleTree9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "src"#) -}
e709745e428ea258d5bed30e59d32d8c
  f :: GHC.Types.Int -> [GHC.Types.Char] -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <S(S),1*U(1*U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.f1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <[GHC.Types.Char]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
fb21b7087ce5b6c4ac72354ce025f707
  f1 ::
    GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S(S),1*U(1*U)><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: [GHC.Types.Char])
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wf ww1 w1 w2 }) -}
6ca5e24b6c25b0b3e30ee25b22c7e3db
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
46bd154a29b526f660b44bd9ebd7a365
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Directory.getDirectoryContents1
                        Main.exampleTree10
                        s of ds13 { (#,#) ipv ipv1 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (GHC.Show.showList__
                      @ [GHC.Types.Char]
                      GHC.Show.shows_$cshowList1
                      (GHC.List.filter
                         @ [GHC.Types.Char]
                         System.Directory.listDirectory2
                         ipv1)
                      (GHC.Types.[] @ GHC.Types.Char))
                   GHC.Types.True
                   ipv }) -}
3be7799554f1a7eec5bdbf06c6ef8231
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
8c993af4d0dccdeeccdb109bbc4e88be
  toTree :: GHC.IO.FilePath -> GHC.Types.IO Main.Tree
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.toTree1
                  `cast`
                (<GHC.IO.FilePath>_R ->_R Sym (GHC.Types.N:IO[0] <Main.Tree>_R)) -}
7904b62b3a936a8762d03a3b8f29f521
  toTree1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Tree #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (fp :: GHC.IO.FilePath)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.catch#
                        @ GHC.Types.Bool
                        @ GHC.Exception.SomeException
                        (GHC.Magic.lazy
                           @ (GHC.Types.IO GHC.Types.Bool)
                           (System.Directory.doesDirectoryExist5
                              @ GHC.Types.Bool
                              System.Directory.doesDirectoryExist4
                              fp
                              System.Directory.doesDirectoryExist3
                                `cast`
                              (<GHC.Ptr.Ptr System.Posix.Internals.CStat>_R
                               ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)))
                             `cast`
                           (Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)))
                          `cast`
                        (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)
                        System.Directory.doesDirectoryExist2
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Types.False -> (# ipv, Main.File fp #)
                   GHC.Types.True
                   -> case System.Directory.getDirectoryContents1
                             fp
                             ipv of ds13 { (#,#) ipv2 ipv3 ->
                      case Main.toTree2
                             (GHC.List.filter
                                @ [GHC.Types.Char]
                                System.Directory.listDirectory2
                                ipv3)
                             ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                      (# ipv4, Main.Directory fp ipv5 #) } } } }) -}
268937941048b6b59b173af4be4fc074
  toTree2 ::
    [GHC.IO.FilePath]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Main.Tree] #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
06d4c90e63b946082deb69e13e87bd9c
  toTrees :: [GHC.IO.FilePath] -> GHC.Types.IO [Main.Tree]
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.toTree2
                  `cast`
                (<[GHC.IO.FilePath]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[Main.Tree]>_R)) -}
instance [safe] GHC.Show.Show [Main.Tree] = Main.$fShowTree
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

